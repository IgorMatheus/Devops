- name: Playbook Caravel + SSL + Monitoramento
  hosts: DR-AL
  user: "{{ SERVER_USER }}"
#  gather_facts: no
  tasks:
   - name: Update Packages
     become: true
     become_user: root
     apt:
       update_cache: yes
   - name: DOCKER - prerequisite packages 
     become: true
     become_user: root
     ansible.builtin.package:
       name:
         - apt-transport-https
         - ca-certificates
         - curl
         - software-properties-common
       state: latest
   - name: DOCKER - Add Docker’s official GPG key
     become: true
     become_user: root
     ansible.builtin.shell: |
       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
       add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
   - name: Update Packages
     become: true
     become_user: root
     apt:
       update_cache: yes
   - name: DOCKER - Installation
     become: true
     become_user: root
     ansible.builtin.package:
       name:
         - docker-ce
   - name: DOCKER - Add user to docker group
     become: true
     become_user: root
     ansible.builtin.shell: |
       sudo "{{ SERVER_USER }}"
       usermod -aG docker "{{ SERVER_USER }}"
   - name: DOCKER-COMPOSE - Installation version 2.3.3
     become: true
     become_user: root
     ansible.builtin.shell: |
       mkdir -p ~/.docker/cli-plugins/
       curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
       chmod +x ~/.docker/cli-plugins/docker-compose
       cp ~/.docker/cli-plugins/docker-compose /usr/bin
   - name: DOCKER-COMPOSE - Copy Dataraft Project
     ansible.builtin.copy:
       src: "{{ LOCAL_PATH }}"
       dest: "{{ REMOTE_PATH }}"
   - name: DOCKER SWARM - Initialize a swarm
     become: true
     become_user: root
     ansible.builtin.shell: |
       docker swarm init --advertise-addr {{ SERVER_IP }}
   - name: DOCKER NETWORK - Creating the network connection between the containers
     become: true
     become_user: root
     ansible.builtin.shell: |
       docker network create --driver overlay --attachable dataraft
   - name: DOCKER PLUGIN - Installing plugin Loki
     become: true
     become_user: root
     ansible.builtin.shell: |
       docker plugin install grafana/loki-docker-driver:main-7d67b63 --alias loki --grant-all-permissions
   - name: DOCKER VOLUME - Creating all necessary volumes
     become: true
     become_user: root
     ansible.builtin.shell: |
       docker volume create portainer_data
       docker volume create postgres_data
       docker volume create caravel_models
       docker volume create caravel_storage
       docker volume create minio_data
       docker volume create jupyter_data
       docker volume create airflow_postgres_db_volume
       docker volume create airflow_data
       docker volume create prometheus_config
       docker volume create prometheus_data
       docker volume create grafana_config
       docker volume create grafana_data
       docker volume create loki_config
       docker volume create loki_data
       docker volume create alertmanager_config
       docker volume create alertmanager_data
       docker volume create nginx_config
       docker volume create certbot_conf
       docker volume create certbot_www
   - name: DOCKER VOLUME - Copying config files to volumes
     become: true
     become_user: root
     ansible.builtin.shell: |
       cp {{ MONITORING_PATH }}/prometheus.yml /var/lib/docker/volumes/prometheus_config/_data/
       cp {{ MONITORING_PATH }}/rules.yml /var/lib/docker/volumes/prometheus_config/_data/
       cp {{ MONITORING_PATH }}/loki-config.yml /var/lib/docker/volumes/loki_config/_data/
       cp {{ MONITORING_PATH }}/alertmanager.yml /var/lib/docker/volumes/alertmanager_config/_data/
       cp {{ NGINX_PATH }}/default.conf.http /var/lib/docker/volumes/nginx_config/_data/
       cp {{ NGINX_PATH }}/default.conf.https /var/lib/docker/volumes/nginx_config/_data/
   - name: DOCKER-COMPOSE - Starting Portainer Container
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ PORTAINER_PATH }}
       docker-compose up -d
   - name: SYSTEM - Additional packages
     become: true
     become_user: root
     ansible.builtin.package:
       name:
         - httpie
         - jq
       state: latest
   - name: PORTAINER API - Getting auth token
     become: true
     become_user: root
     register: PORTAINER_TOKEN
     ansible.builtin.shell: |
       http POST localhost:9000/api/auth Username="admin" Password="tecnicamenteperfeita" | jq -r .jwt
   - name: DOCKER INFO - Getting Cluster ID
     become: true
     become_user: root
     register: CLUSTER_ID
     ansible.builtin.shell: |
       docker info | grep -i clusterid | awk '{print $2}'
   - name: PORTAINER  API - Create a new environment(endpoint)
     become: true
     become_user: root
     ansible.builtin.shell: |
       http --verify=no --form POST https://localhost:9443/api/endpoints "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" Name=DATARAFT EndpointCreationType=1
   - name: PORTAINER  API - Connecting to private registry
     become: true
     become_user: root
     ansible.builtin.shell: |
       curl --request POST --insecure https://localhost:9443/api/registries --header "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" --data '{"type":3, "authentication":true, "name":"{{ REGISTRY_NAME }}", "url":"{{ REGISTRY_URL }}", "username":"{{ REGISTRY_USERNAME }}", "password":"{{ REGISTRY_PASSWORD }}"}'
   - name: PORTAINER API - Deploy Postgres Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ POSTGRES_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Postgres SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Adminer Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ ADMINER_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Adminer SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Caravel Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ CARAVEL_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Caravel SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Minio Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ MINIO_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Minio SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Jupyter Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ JUPYTER_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Jupyter SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Airflow Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ AIRFLOW_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Airflow SwarmID={{ CLUSTER_ID.stdout }}
   - name: PORTAINER API - Deploy Monitoring Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ MONITORING_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Monitoramento SwarmID={{ CLUSTER_ID.stdout }}
   - name: NGINX - default.conf ### DEPURAR ERRO - airflow-webserver não subiu corretamente. Assim, o Nginx falhou na inicialização ###
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd /var/lib/docker/volumes/nginx_config/_data/
       cat default.conf.http >| default.conf
   - name: PORTAINER API - Deploy Nginx Stack
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ NGINX_PATH }}
       http --form POST http://localhost:9000/api/stacks "Authorization: Bearer {{ PORTAINER_TOKEN.stdout }}" type=1 method=file file@docker-compose.yaml endpointId=1 Name=Nginx SwarmID={{ CLUSTER_ID.stdout }}
   - name: CERTBOT - Requesting SSL
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd {{ NGINX_PATH }}
       docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d {{ base_url }}
       #       docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ -d {{ base_url }}
   - name: NGINX - Changing default.conf to use HTTPS
     become: true
     become_user: root
     ansible.builtin.shell: |
       cd /var/lib/docker/volumes/nginx_config/_data/
       cat default.conf.https >| default.conf
       cd {{ NGINX_PATH }}
       docker-compose restart proxy_reverso
